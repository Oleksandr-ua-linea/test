import asyncio
from idlelib.iomenu import errors

from aiogram import Bot, types, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.utils.formatting import Bold, Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiosend import CryptoPay, TESTNET

cp = CryptoPay("42336:AAjnhyXZFsOAsf2ugIChymqf8mqQ0mYcf5m", TESTNET)
bot = Bot(
    token="7620483217:AAHeIYSRxlNxNpsn9i0rt8ffcGzm_lanftE",
    default=DefaultBotProperties(
        parse_mode=ParseMode.HTML
    )
)
dp = Dispatcher()


def get_keyboard_main():
    buttons = [
        [types.InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balanceup")],
        [
            types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
            types.InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referal")
        ],
        [types.InlineKeyboardButton(text="‚ÑπÔ∏è Info", callback_data="info")]
    ]
    keyboard_main = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard_main

def get_keyboard_profile():
    buttons = [
        [types.InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balanceup")],
        [types.InlineKeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")],
        [types.InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referal")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    keyboard_profile = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard_profile

def get_keyboard_history():
    buttons = [
        [types.InlineKeyboardButton(text="üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="balanceup")],
        [types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [types.InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referal")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    keyboard_history = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard_history

def get_keyboard_back():
    buttons = [
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    keyboard_back = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard_back

def get_keyboard_ref():
    buttons = [
        [types.InlineKeyboardButton(text="üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data="newref")],
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    keyboard_ref = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard_ref


@dp.message(Command("start"))
async def start_message(message: types.Message):
    content = Text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, ",
        Bold(message.from_user.full_name),
        ". –≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Sticker Pack –≤ Telegram \n\n–° –Ω–∏–º —Ç—ã –º–æ–∂–µ—à—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±–µ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –∏ –∫—Ä–µ–ø–∫–∏–µ –Ω–µ—Ä–≤—ã."
    )
    await message.answer(
        **content.as_kwargs(),
        reply_markup=get_keyboard_main()
    )


@dp.message()
async def get_invoice(message: types.Message):
    try:
        if float(message.text) >= 30.00:
            invoice = await cp.create_invoice(amount=float(message.text), asset="USDT")
            await message.answer(f"pay: {invoice.bot_invoice_url}")
            invoice.poll(message=message)
        else:
            await message.answer("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 30 TON")
    except ValueError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ—Ä–Ω–æ")


@cp.invoice_polling()
async def handle_payment(invoice, message):
    await message.answer(f"invoice #{invoice.invoice_id} has been paid",
        reply_markup=get_keyboard_back()
    )


@dp.callback_query(F.data == "profile")
async def send_profile(callback: types.CallbackQuery):
    await callback.message.answer(text=f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n{callback.from_user.full_name}\nid: {callback.from_user.id}\n–ë–∞–ª–∞–Ω—Å: 0\n–ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: 123\n–û—á–µ—Ä–µ–¥—å: 454\n–†–µ—Ñ–µ—Ä–∞–ª—ã: 0\n\n–°—Ç–∏–∫–µ—Ä–ø–∞–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: 0",
        reply_markup=get_keyboard_profile()
    )
    await callback.answer()

@dp.callback_query(F.data == "balanceup")
async def send_balance_up(callback: types.CallbackQuery):
    await callback.message.answer(f"–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ TON:",
        reply_markup=get_keyboard_back()
    )
    await callback.answer()

@dp.callback_query(F.data == "history")
async def send_balance_up(callback: types.CallbackQuery):
    await callback.message.answer(f"–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n\n\n\n–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π:",
        reply_markup=get_keyboard_history()
    )
    await callback.answer()

@dp.callback_query(F.data == "referal")
async def check_my_ref(callback: types.CallbackQuery):
    await callback.message.answer(f"üë• –í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n\nRef1\nRef2\nRef3",
        reply_markup=get_keyboard_ref()
    )
    await callback.answer()

@dp.callback_query(F.data == "info")
async def send_balance_up(callback: types.CallbackQuery):
    await callback.message.answer(f"C –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –°—Ç–∏–∫–µ—Ä–ø–∞–∫–∏ –∏ –ù–§–¢-–ø–æ–¥–∞—Ä–∫–∏ –∑–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É TON.\n–¢–µ–º —Å–∞–º—ã–º –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–∂–∏–¥–∞—Ç—å 21 –¥–µ–Ω—å, –≤ –æ—Ç–ª–∏—á–∏–∏ –æ—Ç –ø–æ–∫—É–ø–æ–∫ –∑–∞ –∑–≤—ë–∑–¥—ã.",
        reply_markup=get_keyboard_back()
    )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def start_message(callback: types.CallbackQuery):
    content = Text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, ",
        Bold(callback.from_user.full_name),
        ". –≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ StickerPack –∏ NFT-gift –≤ Telegram. \n\n–° –Ω–∏–º —Ç—ã –º–æ–∂–µ—à—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±–µ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –∏ –∫—Ä–µ–ø–∫–∏–µ –Ω–µ—Ä–≤—ã."
    )
    await callback.message.answer(
        **content.as_kwargs(),
        reply_markup=get_keyboard_main()
    )
    await callback.answer()


async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        cp.start_polling(),
    )


if __name__ == "__main__":
    asyncio.run(main())